"""
Base de datos de tours y paquetes tur√≠sticos usando SQLite.
"""

import sqlite3
import json
import os

# Ruta a la base de datos SQLite
DB_PATH = os.path.join(os.path.dirname(__file__), 'tours.db')

# Tours iniciales para cargar en la base de datos si est√° vac√≠a
INITIAL_TOURS = [
    {
        "id": "T001",
        "name": "Tour por Canc√∫n",
        "description": "Disfruta de las hermosas playas de Canc√∫n con este paquete todo incluido.",
        "duration": "7 d√≠as / 6 noches",
        "price": 12500,
        "currency": "MXN",
        "includes": ["Hotel 5 estrellas", "Desayunos", "Traslados", "Tour a Chichen Itz√°"],
        "location": "Canc√∫n, M√©xico",
        "availability": "Todo el a√±o",
        "tags": ["playa", "caribe", "m√©xico", "canc√∫n", "todo incluido"]
    },
    {
        "id": "T002",
        "name": "Aventura en Los Cabos",
        "description": "Experimenta la emoci√≥n de Los Cabos con actividades acu√°ticas y paisajes impresionantes.",
        "duration": "5 d√≠as / 4 noches",
        "price": 9800,
        "currency": "MXN",
        "includes": ["Hotel 4 estrellas", "Desayunos", "Tour en catam√°r√°n", "Snorkel"],
        "location": "Los Cabos, M√©xico",
        "availability": "Todo el a√±o",
        "tags": ["playa", "pac√≠fico", "m√©xico", "los cabos", "aventura"]
    },
    {
        "id": "T003",
        "name": "Ciudad de M√©xico Cultural",
        "description": "Conoce la riqueza cultural e hist√≥rica de la Ciudad de M√©xico.",
        "duration": "4 d√≠as / 3 noches",
        "price": 5600,
        "currency": "MXN",
        "includes": ["Hotel c√©ntrico", "Desayunos", "Tour por el Centro Hist√≥rico", "Visita a Teotihuac√°n"],
        "location": "Ciudad de M√©xico, M√©xico",
        "availability": "Todo el a√±o",
        "tags": ["ciudad", "cultura", "m√©xico", "cdmx", "historia", "arqueolog√≠a"]
    },
    {
        "id": "T004",
        "name": "Maravillas de Oaxaca",
        "description": "Descubre la magia, tradiciones y gastronom√≠a de Oaxaca.",
        "duration": "6 d√≠as / 5 noches",
        "price": 7800,
        "currency": "MXN",
        "includes": ["Hotel boutique", "Desayunos", "Tour gastron√≥mico", "Visita a Monte Alb√°n"],
        "location": "Oaxaca, M√©xico",
        "availability": "Todo el a√±o",
        "tags": ["cultura", "gastronom√≠a", "m√©xico", "oaxaca", "artesan√≠as"]
    },
    {
        "id": "T005",
        "name": "Riviera Maya Todo Incluido",
        "description": "Rel√°jate en las paradis√≠acas playas de la Riviera Maya con todo incluido.",
        "duration": "7 d√≠as / 6 noches",
        "price": 15200,
        "currency": "MXN",
        "includes": ["Resort 5 estrellas", "Todo incluido", "Acceso a parques Xcaret", "Cenotes"],
        "location": "Riviera Maya, M√©xico",
        "availability": "Todo el a√±o",
        "tags": ["playa", "caribe", "m√©xico", "riviera maya", "todo incluido", "xcaret"]
    }
]

def init_db():
    """
    Inicializa la base de datos y crea las tablas necesarias si no existen.
    """
    # Verificar si el archivo de base de datos existe
    db_exists = os.path.exists(DB_PATH)
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # Crear tabla de tours si no existe
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tours (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT NOT NULL,
        duration TEXT NOT NULL,
        price REAL NOT NULL,
        currency TEXT NOT NULL,
        includes TEXT NOT NULL,
        location TEXT NOT NULL,
        availability TEXT NOT NULL,
        tags TEXT NOT NULL
    )
    ''')
    
    # Si la base de datos no exist√≠a o la tabla est√° vac√≠a, cargar los tours iniciales
    cursor.execute('SELECT COUNT(*) FROM tours')
    count = cursor.fetchone()[0]
    
    if count == 0:
        print("Cargando tours iniciales en la base de datos...")
        for tour in INITIAL_TOURS:
            cursor.execute('''
            INSERT INTO tours (id, name, description, duration, price, currency, includes, location, availability, tags)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                tour['id'],
                tour['name'],
                tour['description'],
                tour['duration'],
                tour['price'],
                tour['currency'],
                json.dumps(tour['includes']),
                tour['location'],
                tour['availability'],
                json.dumps(tour['tags'])
            ))
            print(f"Tour a√±adido: {tour['name']}")
    
    conn.commit()
    conn.close()
    
    # Verificar si la inicializaci√≥n fue exitosa
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM tours')
    count = cursor.fetchone()[0]
    print(f"Total de tours en la base de datos: {count}")
    conn.close()

# Inicializar la base de datos al importar el m√≥dulo
init_db()

def get_all_tours():
    """
    Obtiene todos los tours disponibles.
    
    Returns:
        list: Lista de todos los tours
    """
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM tours')
    tours_data = cursor.fetchall()
    
    tours = []
    for tour in tours_data:
        # Convertir el objeto Row a un diccionario para acceder por nombre de columna
        tour_dict = dict(tour)
        tours.append({
            'id': tour_dict['id'],
            'name': tour_dict['name'],
            'description': tour_dict['description'],
            'duration': tour_dict['duration'],
            'price': tour_dict['price'],
            'currency': tour_dict['currency'],
            'includes': json.loads(tour_dict['includes']),
            'location': tour_dict['location'],
            'availability': tour_dict['availability'],
            'tags': json.loads(tour_dict['tags'])
        })
    
    conn.close()
    return tours

def search_tours(query):
    """
    Busca tours que coincidan con la consulta.
    
    Args:
        query (str): Consulta de b√∫squeda
        
    Returns:
        list: Lista de tours que coinciden con la consulta
    """
    query = query.lower()
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # Buscar en nombre, descripci√≥n y ubicaci√≥n usando LIKE
    cursor.execute('''
    SELECT * FROM tours WHERE 
    LOWER(name) LIKE ? OR 
    LOWER(description) LIKE ? OR 
    LOWER(location) LIKE ?
    ''', (f'%{query}%', f'%{query}%', f'%{query}%'))
    
    tours_data = cursor.fetchall()
    results = []
    
    for tour in tours_data:
        # Convertir el objeto Row a un diccionario para acceder por nombre de columna
        tour_row = dict(tour)
        # Convertir a diccionario
        tour_dict = {
            'id': tour_row['id'],
            'name': tour_row['name'],
            'description': tour_row['description'],
            'duration': tour_row['duration'],
            'price': tour_row['price'],
            'currency': tour_row['currency'],
            'includes': json.loads(tour_row['includes']),
            'location': tour_row['location'],
            'availability': tour_row['availability'],
            'tags': json.loads(tour_row['tags'])
        }
        
        # Verificar tambi√©n en las etiquetas (ya que est√°n almacenadas como JSON)
        tags = tour_dict['tags']
        if any(query in tag.lower() for tag in tags):
            # Si a√∫n no est√° en los resultados, a√±adirlo
            if not any(r['id'] == tour_dict['id'] for r in results):
                results.append(tour_dict)
        else:
            # Si ya est√° en los resultados por la b√∫squeda SQL, no hacer nada
            # Si no est√° en los resultados, verificar si deber√≠a estar
            if not any(r['id'] == tour_dict['id'] for r in results):
                results.append(tour_dict)
    
    conn.close()
    return results

def get_tour_by_id(tour_id):
    """
    Obtiene un tour por su ID.
    
    Args:
        tour_id (str): ID del tour
        
    Returns:
        dict: Tour encontrado o None si no existe
    """
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM tours WHERE id = ?', (tour_id,))
    tour = cursor.fetchone()
    
    if tour:
        # Convertir el objeto Row a un diccionario para acceder por nombre de columna
        tour_row = dict(tour)
        tour_dict = {
            'id': tour_row['id'],
            'name': tour_row['name'],
            'description': tour_row['description'],
            'duration': tour_row['duration'],
            'price': tour_row['price'],
            'currency': tour_row['currency'],
            'includes': json.loads(tour_row['includes']),
            'location': tour_row['location'],
            'availability': tour_row['availability'],
            'tags': json.loads(tour_row['tags'])
        }
        conn.close()
        return tour_dict
    
    conn.close()
    return None

def format_tour_info(tour):
    """
    Formatea la informaci√≥n de un tour para mostrarla en un mensaje.
    
    Args:
        tour (dict): Informaci√≥n del tour
        
    Returns:
        str: Mensaje formateado
    """
    includes = "\n".join([f"  - {item}" for item in tour["includes"]])
    
    return (
        f"*{tour['name']}*\n\n"
        f"{tour['description']}\n\n"
        f"üìÖ *Duraci√≥n:* {tour['duration']}\n"
        f"üìç *Ubicaci√≥n:* {tour['location']}\n"
        f"üí∞ *Precio:* ${tour['price']} {tour['currency']}\n"
        f"üìÖ *Disponibilidad:* {tour['availability']}\n\n"
        f"‚úÖ *Incluye:*\n{includes}\n\n"
        f"üîç *ID del tour:* {tour['id']}\n\n"
        f"Para reservar este tour, responde con 'reservar {tour['id']}'"
    )

# Funciones CRUD para el panel de administraci√≥n

def add_tour(tour_data):
    """
    A√±ade un nuevo tour a la base de datos.
    
    Args:
        tour_data (dict): Datos del tour a a√±adir
        
    Returns:
        bool: True si se a√±adi√≥ correctamente, False en caso contrario
    """
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Generar un nuevo ID si no se proporciona
        if 'id' not in tour_data or not tour_data['id']:
            # Obtener el √∫ltimo ID y generar uno nuevo
            cursor.execute('SELECT id FROM tours ORDER BY id DESC LIMIT 1')
            last_id = cursor.fetchone()
            if last_id:
                # Extraer el n√∫mero y aumentarlo en 1
                num = int(last_id[0][1:]) + 1
                tour_data['id'] = f"T{num:03d}"
            else:
                tour_data['id'] = "T001"
        
        cursor.execute('''
        INSERT INTO tours (id, name, description, duration, price, currency, includes, location, availability, tags)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            tour_data['id'],
            tour_data['name'],
            tour_data['description'],
            tour_data['duration'],
            tour_data['price'],
            tour_data['currency'],
            json.dumps(tour_data['includes']),
            tour_data['location'],
            tour_data['availability'],
            json.dumps(tour_data['tags'])
        ))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"Error al a√±adir tour: {str(e)}")
        return False

def update_tour(tour_id, tour_data):
    """
    Actualiza un tour existente en la base de datos.
    
    Args:
        tour_id (str): ID del tour a actualizar
        tour_data (dict): Nuevos datos del tour
        
    Returns:
        bool: True si se actualiz√≥ correctamente, False en caso contrario
    """
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
        UPDATE tours SET 
            name = ?,
            description = ?,
            duration = ?,
            price = ?,
            currency = ?,
            includes = ?,
            location = ?,
            availability = ?,
            tags = ?
        WHERE id = ?
        ''', (
            tour_data['name'],
            tour_data['description'],
            tour_data['duration'],
            tour_data['price'],
            tour_data['currency'],
            json.dumps(tour_data['includes']),
            tour_data['location'],
            tour_data['availability'],
            json.dumps(tour_data['tags']),
            tour_id
        ))
        
        conn.commit()
        conn.close()
        return cursor.rowcount > 0
    except Exception as e:
        print(f"Error al actualizar tour: {str(e)}")
        return False

def delete_tour(tour_id):
    """
    Elimina un tour de la base de datos.
    
    Args:
        tour_id (str): ID del tour a eliminar
        
    Returns:
        bool: True si se elimin√≥ correctamente, False en caso contrario
    """
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM tours WHERE id = ?', (tour_id,))
        
        conn.commit()
        conn.close()
        return cursor.rowcount > 0
    except Exception as e:
        print(f"Error al eliminar tour: {str(e)}")
        return False
